source "proxmox" "vm" {
  dynamic "additional_iso_files" {
    for_each = var.additional_iso_files
    content {
      device   = additional_iso_files.value.device
      iso_checksum = additional_iso_files.value.iso_checksum
      iso_file = length(additional_iso_files.value.iso_file) > 0 ? "${var.iso_storage_pool}:iso/${additional_iso_files.value.iso_file}" : ""
      iso_storage_pool = var.iso_storage_pool
      iso_url = additional_iso_files.value.iso_url
      unmount  = true
    }
  }
  boot                    = "order=${var.disk_type}0;ide2;net0"
  boot_command            = var.boot_command
  boot_wait               = var.boot_wait
  communicator = var.communicator
  cloud_init              = var.cloud_init
  cloud_init_storage_pool = var.cloud_init_storage_pool
  cores                   = var.cores
  cpu_type                = var.cpu_type
  disable_kvm             = var.disable_kvm
  disks {
    cache_mode        = var.disk_cache
    disk_size         = var.disk_size
    format            = var.disk_format
    storage_pool      = var.datastore
    storage_pool_type = var.datastore_type
    type              = var.disk_type
  }
  http_bind_address        = var.bind_address
  http_directory           = var.http_directory
  http_port_max            = var.bind_max_port
  http_port_min            = var.bind_min_port
  insecure_skip_tls_verify = var.proxmox_insecure_tls
  iso_checksum             = var.iso_checksum
  iso_file                 = var.iso_download ? "" : "${var.iso_storage_pool}:iso/${var.iso_file}"
  iso_storage_pool         = var.iso_storage_pool
  iso_url                  = var.iso_download ? var.iso_url : ""
  memory                   = var.memory
  network_adapters {
    bridge = var.network_adapter
    model  = var.network_adapter_model
  }
  node                 = var.proxmox_node_name
  onboot               = var.start_on_boot
  os                   = var.os
  password             = var.proxmox_api_password
  pool                 = var.proxmox_pool
  proxmox_url          = "https://${var.proxmox_host}/api2/json"
  qemu_agent           = true
  scsi_controller      = var.scsi_controller
  sockets              = var.sockets

  template_description = "${var.template_name}, generated by packer on ${formatdate("YYYY-MM-DD hh:mm:ss", timestamp())}"
  template_name        = var.template_name
  unmount_iso          = true
  username             = var.proxmox_api_user
  vga {
    memory = var.vga_memory
    type   = var.vga_type
  }
  vm_id   = var.vmid
  vm_name = var.template_name

  ssh_username         = var.ssh_username
  ssh_password         = var.ssh_password
  ssh_timeout          = var.ssh_timeout

  winrm_username = var.winrm_username
  winrm_password = var.winrm_password
  winrm_insecure = true
  winrm_use_ssl  = false
}

build {
  name = "linux"
  sources = ["source.proxmox.vm"]

  provisioner "shell" {
    execute_command = "echo 'packer' | {{ .Vars }} sudo -S -E sh -eux '{{ .Path }}'"
    inline          = var.provisioner
    skip_clean      = true
  }
}

build {
  name = "windows"
  sources = ["source.proxmox.vm"]
}
